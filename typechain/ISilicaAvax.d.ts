/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISilicaAvaxInterface extends ethers.utils.Interface {
  functions: {
    "amountDueAtContractEnd()": FunctionFragment;
    "amountLocked()": FunctionFragment;
    "amountOwedNextUpdate()": FunctionFragment;
    "defaultContract(uint32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "fulfillUpdate(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "tryToCompleteContract(uint32,uint256)": FunctionFragment;
    "tryToExpireContract(uint32)": FunctionFragment;
    "tryToStartContract(uint32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "amountDueAtContractEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountOwedNextUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultContract",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillUpdate",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToCompleteContract",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToExpireContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToStartContract",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "amountDueAtContractEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountOwedNextUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tryToCompleteContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryToExpireContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryToStartContract",
    data: BytesLike
  ): Result;

  events: {
    "BidConfirmed(address,uint256,uint256,uint256)": EventFragment;
    "BuyerDefault(address,uint256,uint256)": EventFragment;
    "BuyerRedeem(address,uint256,uint256)": EventFragment;
    "SellerDefault(address,uint256)": EventFragment;
    "SellerRedeem(address,uint256)": EventFragment;
    "StatusChange(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusChange"): EventFragment;
}

export type BidConfirmedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    buyer: string;
    purchaseAmount: BigNumber;
    mintedTokens: BigNumber;
    timestamp: BigNumber;
  }
>;

export type BuyerDefaultEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    buyer: string;
    paymentAmount: BigNumber;
    rewardAmount: BigNumber;
  }
>;

export type BuyerRedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    buyer: string;
    rewardAmount: BigNumber;
    tokensBurned: BigNumber;
  }
>;

export type SellerDefaultEvent = TypedEvent<
  [string, BigNumber] & { seller: string; paymentAmount: BigNumber }
>;

export type SellerRedeemEvent = TypedEvent<
  [string, BigNumber] & { seller: string; paymentAmount: BigNumber }
>;

export type StatusChangeEvent = TypedEvent<
  [BigNumber] & { newStatus: BigNumber }
>;

export class ISilicaAvax extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISilicaAvaxInterface;

  functions: {
    amountDueAtContractEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountOwedNextUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillUpdate(
      _nextUpdateDay: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _paymentToken: string,
      _seller: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _contractPeriod: BigNumberish,
      _amountLockedOnCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryToCompleteContract(
      day: BigNumberish,
      remainingBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryToExpireContract(
      day: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryToStartContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  amountDueAtContractEnd(overrides?: CallOverrides): Promise<BigNumber>;

  amountLocked(overrides?: CallOverrides): Promise<BigNumber>;

  amountOwedNextUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  defaultContract(
    day: BigNumberish,
    _currentSupply: BigNumberish,
    _supplyCap: BigNumberish,
    _maxStakingDuration: BigNumberish,
    _maxConsumptionRate: BigNumberish,
    _minConsumptionRate: BigNumberish,
    _mintingPeriod: BigNumberish,
    _scale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillUpdate(
    _nextUpdateDay: BigNumberish,
    _currentSupply: BigNumberish,
    _supplyCap: BigNumberish,
    _maxStakingDuration: BigNumberish,
    _maxConsumptionRate: BigNumberish,
    _minConsumptionRate: BigNumberish,
    _mintingPeriod: BigNumberish,
    _scale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _paymentToken: string,
    _seller: string,
    _price: BigNumberish,
    _stakedAmount: BigNumberish,
    _contractPeriod: BigNumberish,
    _amountLockedOnCreate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryToCompleteContract(
    day: BigNumberish,
    remainingBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryToExpireContract(
    day: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryToStartContract(
    day: BigNumberish,
    _currentSupply: BigNumberish,
    _supplyCap: BigNumberish,
    _maxStakingDuration: BigNumberish,
    _maxConsumptionRate: BigNumberish,
    _minConsumptionRate: BigNumberish,
    _mintingPeriod: BigNumberish,
    _scale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amountDueAtContractEnd(overrides?: CallOverrides): Promise<BigNumber>;

    amountLocked(overrides?: CallOverrides): Promise<BigNumber>;

    amountOwedNextUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    defaultContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillUpdate(
      _nextUpdateDay: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _paymentToken: string,
      _seller: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _contractPeriod: BigNumberish,
      _amountLockedOnCreate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tryToCompleteContract(
      day: BigNumberish,
      remainingBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    tryToExpireContract(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    tryToStartContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;
  };

  filters: {
    "BidConfirmed(address,uint256,uint256,uint256)"(
      buyer?: string | null,
      purchaseAmount?: null,
      mintedTokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        purchaseAmount: BigNumber;
        mintedTokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    BidConfirmed(
      buyer?: string | null,
      purchaseAmount?: null,
      mintedTokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        purchaseAmount: BigNumber;
        mintedTokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "BuyerDefault(address,uint256,uint256)"(
      buyer?: string | null,
      paymentAmount?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; paymentAmount: BigNumber; rewardAmount: BigNumber }
    >;

    BuyerDefault(
      buyer?: string | null,
      paymentAmount?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; paymentAmount: BigNumber; rewardAmount: BigNumber }
    >;

    "BuyerRedeem(address,uint256,uint256)"(
      buyer?: string | null,
      rewardAmount?: null,
      tokensBurned?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; rewardAmount: BigNumber; tokensBurned: BigNumber }
    >;

    BuyerRedeem(
      buyer?: string | null,
      rewardAmount?: null,
      tokensBurned?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; rewardAmount: BigNumber; tokensBurned: BigNumber }
    >;

    "SellerDefault(address,uint256)"(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    SellerDefault(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    "SellerRedeem(address,uint256)"(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    SellerRedeem(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    "StatusChange(uint256)"(
      newStatus?: null
    ): TypedEventFilter<[BigNumber], { newStatus: BigNumber }>;

    StatusChange(
      newStatus?: null
    ): TypedEventFilter<[BigNumber], { newStatus: BigNumber }>;
  };

  estimateGas: {
    amountDueAtContractEnd(overrides?: CallOverrides): Promise<BigNumber>;

    amountLocked(overrides?: CallOverrides): Promise<BigNumber>;

    amountOwedNextUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    defaultContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillUpdate(
      _nextUpdateDay: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _paymentToken: string,
      _seller: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _contractPeriod: BigNumberish,
      _amountLockedOnCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryToCompleteContract(
      day: BigNumberish,
      remainingBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryToExpireContract(
      day: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryToStartContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountDueAtContractEnd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountOwedNextUpdate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillUpdate(
      _nextUpdateDay: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _paymentToken: string,
      _seller: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _contractPeriod: BigNumberish,
      _amountLockedOnCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryToCompleteContract(
      day: BigNumberish,
      remainingBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryToExpireContract(
      day: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryToStartContract(
      day: BigNumberish,
      _currentSupply: BigNumberish,
      _supplyCap: BigNumberish,
      _maxStakingDuration: BigNumberish,
      _maxConsumptionRate: BigNumberish,
      _minConsumptionRate: BigNumberish,
      _mintingPeriod: BigNumberish,
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
