/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IHashVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHashVault__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IOraclePoS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOraclePoS__factory>;
    getContractFactory(
      name: "IOracleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleRegistry__factory>;
    getContractFactory(
      name: "ISilicaAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaAccount__factory>;
    getContractFactory(
      name: "ISilicaAccountEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaAccountEvents__factory>;
    getContractFactory(
      name: "ISilicaAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaAccountFactory__factory>;
    getContractFactory(
      name: "ISilica",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilica__factory>;
    getContractFactory(
      name: "ISilicaAvax",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaAvax__factory>;
    getContractFactory(
      name: "ISilicaAvaxEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaAvaxEvents__factory>;
    getContractFactory(
      name: "ISilicaAvaxFunctions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaAvaxFunctions__factory>;
    getContractFactory(
      name: "ISilicaEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaEvents__factory>;
    getContractFactory(
      name: "ISilicaFunctions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISilicaFunctions__factory>;
    getContractFactory(
      name: "Oracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Oracle__factory>;
    getContractFactory(
      name: "OraclePoS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OraclePoS__factory>;
    getContractFactory(
      name: "OracleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleRegistry__factory>;
    getContractFactory(
      name: "Silica",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Silica__factory>;
    getContractFactory(
      name: "SilicaAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SilicaAccount__factory>;
    getContractFactory(
      name: "SilicaAccountAvax",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SilicaAccountAvax__factory>;
    getContractFactory(
      name: "SilicaAccountAvaxFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SilicaAccountAvaxFactory__factory>;
    getContractFactory(
      name: "SilicaAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SilicaAccountFactory__factory>;
    getContractFactory(
      name: "SilicaAvax",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SilicaAvax__factory>;
    getContractFactory(
      name: "DAI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAI__factory>;
    getContractFactory(
      name: "TesterToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TesterToken__factory>;
    getContractFactory(
      name: "USDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDT__factory>;
    getContractFactory(
      name: "WAVAX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WAVAX__factory>;
    getContractFactory(
      name: "WrappedBTC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedBTC__factory>;
    getContractFactory(
      name: "WrappedETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedETH__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IHashVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHashVault>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IOraclePoS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOraclePoS>;
    getContractAt(
      name: "IOracleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleRegistry>;
    getContractAt(
      name: "ISilicaAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaAccount>;
    getContractAt(
      name: "ISilicaAccountEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaAccountEvents>;
    getContractAt(
      name: "ISilicaAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaAccountFactory>;
    getContractAt(
      name: "ISilica",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilica>;
    getContractAt(
      name: "ISilicaAvax",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaAvax>;
    getContractAt(
      name: "ISilicaAvaxEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaAvaxEvents>;
    getContractAt(
      name: "ISilicaAvaxFunctions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaAvaxFunctions>;
    getContractAt(
      name: "ISilicaEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaEvents>;
    getContractAt(
      name: "ISilicaFunctions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISilicaFunctions>;
    getContractAt(
      name: "Oracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Oracle>;
    getContractAt(
      name: "OraclePoS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OraclePoS>;
    getContractAt(
      name: "OracleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleRegistry>;
    getContractAt(
      name: "Silica",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Silica>;
    getContractAt(
      name: "SilicaAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SilicaAccount>;
    getContractAt(
      name: "SilicaAccountAvax",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SilicaAccountAvax>;
    getContractAt(
      name: "SilicaAccountAvaxFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SilicaAccountAvaxFactory>;
    getContractAt(
      name: "SilicaAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SilicaAccountFactory>;
    getContractAt(
      name: "SilicaAvax",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SilicaAvax>;
    getContractAt(
      name: "DAI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAI>;
    getContractAt(
      name: "TesterToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TesterToken>;
    getContractAt(
      name: "USDT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDT>;
    getContractAt(
      name: "WAVAX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WAVAX>;
    getContractAt(
      name: "WrappedBTC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedBTC>;
    getContractAt(
      name: "WrappedETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedETH>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
