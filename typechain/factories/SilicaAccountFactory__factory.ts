/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SilicaAccountFactory,
  SilicaAccountFactoryInterface,
} from "../SilicaAccountFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_masterERC20",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sellerAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "erc20TokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "oracleType",
        type: "uint16",
      },
    ],
    name: "NewSilicaAccount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc20TokenAddress",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "oracleType",
        type: "uint16",
      },
    ],
    name: "createSilicaAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sellerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20TokenAddress",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "oracleType",
        type: "uint16",
      },
    ],
    name: "getDeterministicAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "masterERC20",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ddf38038062000ddf8339818101604052810190620000379190620001f5565b620000576200004b6200011260201b60201c565b6200011a60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c19062000248565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000318565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001ef81620002fe565b92915050565b6000602082840312156200020857600080fd5b60006200021884828501620001de565b91505092915050565b6000620002306022836200026a565b91506200023d82620002af565b604082019050919050565b60006020820190508181036000830152620002638162000221565b9050919050565b600082825260208201905092915050565b600062000288826200028f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4d6173746572455243323020616464726573732063616e6e6f74206265207a6560008201527f726f000000000000000000000000000000000000000000000000000000000000602082015250565b62000309816200027b565b81146200031557600080fd5b50565b610ab780620003286000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806315bfe3a914610067578063715018a61461008557806377fd747d1461008f5780638da5cb5b146100bf578063c4f87385146100dd578063f2fde38b1461010d575b600080fd5b61006f610129565b60405161007c9190610886565b60405180910390f35b61008d61014f565b005b6100a960048036038101906100a49190610774565b6101d7565b6040516100b69190610886565b60405180910390f35b6100c7610262565b6040516100d49190610886565b60405180910390f35b6100f760048036038101906100f291906107c3565b61028b565b6040516101049190610886565b60405180910390f35b6101276004803603810190610122919061074b565b6103f1565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101576104e9565b73ffffffffffffffffffffffffffffffffffffffff16610175610262565b73ffffffffffffffffffffffffffffffffffffffff16146101cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c290610941565b60405180910390fd5b6101d560006104f1565b565b6000808484846040516020016101ef939291906108a1565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610257828273ffffffffffffffffffffffffffffffffffffffff166105b590919063ffffffff16565b925050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000803384846040516020016102a3939291906108a1565b604051602081830303815290604052805190602001209050600061030882600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105ca90919063ffffffff16565b905060008190508073ffffffffffffffffffffffffffffffffffffffff16637ebef5293388886040518463ffffffff1660e01b815260040161034c939291906108a1565b600060405180830381600087803b15801561036657600080fd5b505af115801561037a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f596f6c30528b9fcdd31b65b0004e6fbf63475eab005df3f209c298fbd32c798088886040516103dd9291906108d8565b60405180910390a381935050505092915050565b6103f96104e9565b73ffffffffffffffffffffffffffffffffffffffff16610417610262565b73ffffffffffffffffffffffffffffffffffffffff161461046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046490610941565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610901565b60405180910390fd5b6104e6816104f1565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006105c28383306106a1565b905092915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f5915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069290610921565b60405180910390fd5b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528460601b60148201527f5af43d82803e903d91602b57fd5bf3ff0000000000000000000000000000000060288201528260601b603882015283604c82015260378120606c820152605560378201209150509392505050565b60008135905061073081610a53565b92915050565b60008135905061074581610a6a565b92915050565b60006020828403121561075d57600080fd5b600061076b84828501610721565b91505092915050565b60008060006060848603121561078957600080fd5b600061079786828701610721565b93505060206107a886828701610721565b92505060406107b986828701610736565b9150509250925092565b600080604083850312156107d657600080fd5b60006107e485828601610721565b92505060206107f585828601610736565b9150509250929050565b61080881610972565b82525050565b600061081b602683610961565b9150610826826109b2565b604082019050919050565b600061083e601783610961565b915061084982610a01565b602082019050919050565b6000610861602083610961565b915061086c82610a2a565b602082019050919050565b61088081610984565b82525050565b600060208201905061089b60008301846107ff565b92915050565b60006060820190506108b660008301866107ff565b6108c360208301856107ff565b6108d06040830184610877565b949350505050565b60006040820190506108ed60008301856107ff565b6108fa6020830184610877565b9392505050565b6000602082019050818103600083015261091a8161080e565b9050919050565b6000602082019050818103600083015261093a81610831565b9050919050565b6000602082019050818103600083015261095a81610854565b9050919050565b600082825260208201905092915050565b600061097d82610992565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610a5c81610972565b8114610a6757600080fd5b50565b610a7381610984565b8114610a7e57600080fd5b5056fea26469706673582212203029f5ba131c8e4f34661c23fbf5cc101ac944501805b2e2e506080b53252a7164736f6c63430008040033";

export class SilicaAccountFactory__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _masterERC20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SilicaAccountFactory> {
    return super.deploy(
      _masterERC20,
      overrides || {}
    ) as Promise<SilicaAccountFactory>;
  }
  getDeployTransaction(
    _masterERC20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_masterERC20, overrides || {});
  }
  attach(address: string): SilicaAccountFactory {
    return super.attach(address) as SilicaAccountFactory;
  }
  connect(signer: Signer): SilicaAccountFactory__factory {
    return super.connect(signer) as SilicaAccountFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SilicaAccountFactoryInterface {
    return new utils.Interface(_abi) as SilicaAccountFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SilicaAccountFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SilicaAccountFactory;
  }
}
