/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SilicaAccountAvaxInterface extends ethers.utils.Interface {
  functions: {
    "avaxNativeSilicaMaster()": FunctionFragment;
    "createSilicaAvaxContract(address,uint256,uint256,uint256)": FunctionFragment;
    "getAllContracts()": FunctionFragment;
    "getAvailableBalance()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getNextUpdateDay()": FunctionFragment;
    "getRewardTokenAddress()": FunctionFragment;
    "getTotalAmountLocked()": FunctionFragment;
    "getTotalAmountOwedNextUpdate()": FunctionFragment;
    "initialize(address,address,uint16)": FunctionFragment;
    "isERC20()": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "isUpdated()": FunctionFragment;
    "lastUpdateDay()": FunctionFragment;
    "oracleType()": FunctionFragment;
    "owner()": FunctionFragment;
    "shouldUpdate()": FunctionFragment;
    "transferRewardToBuyer(address,uint256)": FunctionFragment;
    "triggerUpdate()": FunctionFragment;
    "withdrawExcessReward(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "avaxNativeSilicaMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSilicaAvaxContract",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUpdateDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountOwedNextUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isERC20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isUpdated", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdateDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shouldUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferRewardToBuyer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessReward",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "avaxNativeSilicaMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSilicaAvaxContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextUpdateDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountOwedNextUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUpdated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracleType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRewardToBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessReward",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NewSilicaContract(address,address,address,uint256,uint256,uint256,uint16)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "SilicaAccountUpdate(address,uint256)": EventFragment;
    "WithdrawExcessReward(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSilicaContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SilicaAccountUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawExcessReward"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type NewSilicaContractEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, number] & {
    silicaAddress: string;
    owner: string;
    paymentTokenAddress: string;
    resourceAmount: BigNumber;
    period: BigNumber;
    reservedPrice: BigNumber;
    oracleType: number;
  }
>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber] & { arg0: string; arg1: BigNumber }
>;

export type SilicaAccountUpdateEvent = TypedEvent<
  [string, BigNumber] & { from: string; day: BigNumber }
>;

export type WithdrawExcessRewardEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export class SilicaAccountAvax extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SilicaAccountAvaxInterface;

  functions: {
    avaxNativeSilicaMaster(overrides?: CallOverrides): Promise<[string]>;

    createSilicaAvaxContract(
      _paymentToken: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllContracts(
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[], string[]]>;

    getAvailableBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextUpdateDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getTotalAmountLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalAmountOwedNextUpdate(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _owner: string,
      _rewardTokenAddress: string,
      _oracleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isERC20(overrides?: CallOverrides): Promise<[boolean]>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isUpdated(overrides?: CallOverrides): Promise<[boolean]>;

    lastUpdateDay(overrides?: CallOverrides): Promise<[number]>;

    oracleType(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    shouldUpdate(overrides?: CallOverrides): Promise<[boolean]>;

    transferRewardToBuyer(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawExcessReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  avaxNativeSilicaMaster(overrides?: CallOverrides): Promise<string>;

  createSilicaAvaxContract(
    _paymentToken: string,
    _price: BigNumberish,
    _stakedAmount: BigNumberish,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllContracts(
    overrides?: CallOverrides
  ): Promise<[string[], string[], string[], string[], string[]]>;

  getAvailableBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getNextUpdateDay(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardTokenAddress(overrides?: CallOverrides): Promise<string>;

  getTotalAmountLocked(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalAmountOwedNextUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _owner: string,
    _rewardTokenAddress: string,
    _oracleType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isERC20(overrides?: CallOverrides): Promise<boolean>;

  isRegistered(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isUpdated(overrides?: CallOverrides): Promise<boolean>;

  lastUpdateDay(overrides?: CallOverrides): Promise<number>;

  oracleType(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  shouldUpdate(overrides?: CallOverrides): Promise<boolean>;

  transferRewardToBuyer(
    _buyer: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerUpdate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawExcessReward(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    avaxNativeSilicaMaster(overrides?: CallOverrides): Promise<string>;

    createSilicaAvaxContract(
      _paymentToken: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllContracts(
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[], string[]]>;

    getAvailableBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNextUpdateDay(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenAddress(overrides?: CallOverrides): Promise<string>;

    getTotalAmountLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmountOwedNextUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _rewardTokenAddress: string,
      _oracleType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isERC20(overrides?: CallOverrides): Promise<boolean>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isUpdated(overrides?: CallOverrides): Promise<boolean>;

    lastUpdateDay(overrides?: CallOverrides): Promise<number>;

    oracleType(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    shouldUpdate(overrides?: CallOverrides): Promise<boolean>;

    transferRewardToBuyer(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerUpdate(overrides?: CallOverrides): Promise<void>;

    withdrawExcessReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "NewSilicaContract(address,address,address,uint256,uint256,uint256,uint16)"(
      silicaAddress?: string | null,
      owner?: null,
      paymentTokenAddress?: null,
      resourceAmount?: null,
      period?: null,
      reservedPrice?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, number],
      {
        silicaAddress: string;
        owner: string;
        paymentTokenAddress: string;
        resourceAmount: BigNumber;
        period: BigNumber;
        reservedPrice: BigNumber;
        oracleType: number;
      }
    >;

    NewSilicaContract(
      silicaAddress?: string | null,
      owner?: null,
      paymentTokenAddress?: null,
      resourceAmount?: null,
      period?: null,
      reservedPrice?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, number],
      {
        silicaAddress: string;
        owner: string;
        paymentTokenAddress: string;
        resourceAmount: BigNumber;
        period: BigNumber;
        reservedPrice: BigNumber;
        oracleType: number;
      }
    >;

    "Received(address,uint256)"(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    Received(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    "SilicaAccountUpdate(address,uint256)"(
      from?: string | null,
      day?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; day: BigNumber }>;

    SilicaAccountUpdate(
      from?: string | null,
      day?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; day: BigNumber }>;

    "WithdrawExcessReward(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    WithdrawExcessReward(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    avaxNativeSilicaMaster(overrides?: CallOverrides): Promise<BigNumber>;

    createSilicaAvaxContract(
      _paymentToken: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNextUpdateDay(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmountLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmountOwedNextUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _rewardTokenAddress: string,
      _oracleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isERC20(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateDay(overrides?: CallOverrides): Promise<BigNumber>;

    oracleType(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    shouldUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    transferRewardToBuyer(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawExcessReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    avaxNativeSilicaMaster(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSilicaAvaxContract(
      _paymentToken: string,
      _price: BigNumberish,
      _stakedAmount: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextUpdateDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAmountLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAmountOwedNextUpdate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _rewardTokenAddress: string,
      _oracleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUpdated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferRewardToBuyer(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExcessReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
