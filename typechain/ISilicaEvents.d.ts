/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISilicaEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "BidConfirmed(address,uint256,uint256,uint256)": EventFragment;
    "BuyerDefault(address,uint256,uint256)": EventFragment;
    "BuyerRedeem(address,uint256,uint256)": EventFragment;
    "SellerDefault(address,uint256)": EventFragment;
    "SellerRedeem(address,uint256)": EventFragment;
    "StatusChange(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyerRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusChange"): EventFragment;
}

export type BidConfirmedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    buyer: string;
    purchaseAmount: BigNumber;
    mintedTokens: BigNumber;
    timestamp: BigNumber;
  }
>;

export type BuyerDefaultEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    buyer: string;
    paymentAmount: BigNumber;
    rewardAmount: BigNumber;
  }
>;

export type BuyerRedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    buyer: string;
    rewardAmount: BigNumber;
    tokensBurned: BigNumber;
  }
>;

export type SellerDefaultEvent = TypedEvent<
  [string, BigNumber] & { seller: string; paymentAmount: BigNumber }
>;

export type SellerRedeemEvent = TypedEvent<
  [string, BigNumber] & { seller: string; paymentAmount: BigNumber }
>;

export type StatusChangeEvent = TypedEvent<
  [BigNumber] & { newStatus: BigNumber }
>;

export class ISilicaEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISilicaEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "BidConfirmed(address,uint256,uint256,uint256)"(
      buyer?: string | null,
      purchaseAmount?: null,
      mintedTokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        purchaseAmount: BigNumber;
        mintedTokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    BidConfirmed(
      buyer?: string | null,
      purchaseAmount?: null,
      mintedTokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        purchaseAmount: BigNumber;
        mintedTokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "BuyerDefault(address,uint256,uint256)"(
      buyer?: string | null,
      paymentAmount?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; paymentAmount: BigNumber; rewardAmount: BigNumber }
    >;

    BuyerDefault(
      buyer?: string | null,
      paymentAmount?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; paymentAmount: BigNumber; rewardAmount: BigNumber }
    >;

    "BuyerRedeem(address,uint256,uint256)"(
      buyer?: string | null,
      rewardAmount?: null,
      tokensBurned?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; rewardAmount: BigNumber; tokensBurned: BigNumber }
    >;

    BuyerRedeem(
      buyer?: string | null,
      rewardAmount?: null,
      tokensBurned?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; rewardAmount: BigNumber; tokensBurned: BigNumber }
    >;

    "SellerDefault(address,uint256)"(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    SellerDefault(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    "SellerRedeem(address,uint256)"(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    SellerRedeem(
      seller?: string | null,
      paymentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; paymentAmount: BigNumber }
    >;

    "StatusChange(uint256)"(
      newStatus?: null
    ): TypedEventFilter<[BigNumber], { newStatus: BigNumber }>;

    StatusChange(
      newStatus?: null
    ): TypedEventFilter<[BigNumber], { newStatus: BigNumber }>;
  };

  estimateGas: {};

  populateTransaction: {};
}
