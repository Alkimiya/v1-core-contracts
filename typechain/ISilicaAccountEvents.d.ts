/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISilicaAccountEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "NewSilicaContract(address,address,address,uint256,uint256,uint256,uint16)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "SilicaAccountUpdate(address,uint256)": EventFragment;
    "WithdrawExcessReward(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewSilicaContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SilicaAccountUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawExcessReward"): EventFragment;
}

export type NewSilicaContractEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, number] & {
    silicaAddress: string;
    owner: string;
    paymentTokenAddress: string;
    resourceAmount: BigNumber;
    period: BigNumber;
    reservedPrice: BigNumber;
    oracleType: number;
  }
>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber] & { arg0: string; arg1: BigNumber }
>;

export type SilicaAccountUpdateEvent = TypedEvent<
  [string, BigNumber] & { from: string; day: BigNumber }
>;

export type WithdrawExcessRewardEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export class ISilicaAccountEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISilicaAccountEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "NewSilicaContract(address,address,address,uint256,uint256,uint256,uint16)"(
      silicaAddress?: string | null,
      owner?: null,
      paymentTokenAddress?: null,
      resourceAmount?: null,
      period?: null,
      reservedPrice?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, number],
      {
        silicaAddress: string;
        owner: string;
        paymentTokenAddress: string;
        resourceAmount: BigNumber;
        period: BigNumber;
        reservedPrice: BigNumber;
        oracleType: number;
      }
    >;

    NewSilicaContract(
      silicaAddress?: string | null,
      owner?: null,
      paymentTokenAddress?: null,
      resourceAmount?: null,
      period?: null,
      reservedPrice?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, number],
      {
        silicaAddress: string;
        owner: string;
        paymentTokenAddress: string;
        resourceAmount: BigNumber;
        period: BigNumber;
        reservedPrice: BigNumber;
        oracleType: number;
      }
    >;

    "Received(address,uint256)"(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    Received(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    "SilicaAccountUpdate(address,uint256)"(
      from?: string | null,
      day?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; day: BigNumber }>;

    SilicaAccountUpdate(
      from?: string | null,
      day?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; day: BigNumber }>;

    "WithdrawExcessReward(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    WithdrawExcessReward(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {};

  populateTransaction: {};
}
