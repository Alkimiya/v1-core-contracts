/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IHashVaultInterface extends ethers.utils.Interface {
  functions: {
    "allocation()": FunctionFragment;
    "calculateShares()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "liquidateAllSilicas()": FunctionFragment;
    "liquidateSingleSilica(address)": FunctionFragment;
    "purchaseSilica(address,uint256)": FunctionFragment;
    "restart()": FunctionFragment;
    "start()": FunctionFragment;
    "swapRewards(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawAdmin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateAllSilicas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateSingleSilica",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseSilica",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "restart", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAdmin",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allocation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAllSilicas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateSingleSilica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseSilica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "restart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAdmin",
    data: BytesLike
  ): Result;

  events: {
    "DepositConfirmed(address,uint256,uint256,address)": EventFragment;
    "PurchaseConfirmed(address,address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseConfirmed"): EventFragment;
}

export type DepositConfirmedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    buyerAddress: string;
    depositAmount: BigNumber;
    timestamp: BigNumber;
    hashVault: string;
  }
>;

export type PurchaseConfirmedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    vaultAdminAddress: string;
    silicaAddress: string;
    amount: BigNumber;
    timestamp: BigNumber;
    hashVault: string;
  }
>;

export class IHashVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IHashVaultInterface;

  functions: {
    allocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _paymentToken: string,
      _rewardToken: string,
      _dateOfStart: BigNumberish,
      _duration: BigNumberish,
      _coolingDuration: BigNumberish,
      _adminFee: BigNumberish,
      _maxDeposits: BigNumberish,
      _minDeposits: BigNumberish,
      _swapRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateAllSilicas(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateSingleSilica(
      silicaAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseSilica(
      silicaAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocation(overrides?: CallOverrides): Promise<BigNumber>;

  calculateShares(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _paymentToken: string,
    _rewardToken: string,
    _dateOfStart: BigNumberish,
    _duration: BigNumberish,
    _coolingDuration: BigNumberish,
    _adminFee: BigNumberish,
    _maxDeposits: BigNumberish,
    _minDeposits: BigNumberish,
    _swapRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateAllSilicas(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateSingleSilica(
    silicaAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseSilica(
    silicaAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapRewards(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocation(overrides?: CallOverrides): Promise<BigNumber>;

    calculateShares(overrides?: CallOverrides): Promise<void>;

    deposit(
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _owner: string,
      _paymentToken: string,
      _rewardToken: string,
      _dateOfStart: BigNumberish,
      _duration: BigNumberish,
      _coolingDuration: BigNumberish,
      _adminFee: BigNumberish,
      _maxDeposits: BigNumberish,
      _minDeposits: BigNumberish,
      _swapRouterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateAllSilicas(overrides?: CallOverrides): Promise<void>;

    liquidateSingleSilica(
      silicaAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseSilica(
      silicaAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    restart(overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    swapRewards(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawAdmin(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DepositConfirmed(address,uint256,uint256,address)"(
      buyerAddress?: string | null,
      depositAmount?: null,
      timestamp?: null,
      hashVault?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        buyerAddress: string;
        depositAmount: BigNumber;
        timestamp: BigNumber;
        hashVault: string;
      }
    >;

    DepositConfirmed(
      buyerAddress?: string | null,
      depositAmount?: null,
      timestamp?: null,
      hashVault?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        buyerAddress: string;
        depositAmount: BigNumber;
        timestamp: BigNumber;
        hashVault: string;
      }
    >;

    "PurchaseConfirmed(address,address,uint256,uint256,address)"(
      vaultAdminAddress?: string | null,
      silicaAddress?: null,
      amount?: null,
      timestamp?: null,
      hashVault?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        vaultAdminAddress: string;
        silicaAddress: string;
        amount: BigNumber;
        timestamp: BigNumber;
        hashVault: string;
      }
    >;

    PurchaseConfirmed(
      vaultAdminAddress?: string | null,
      silicaAddress?: null,
      amount?: null,
      timestamp?: null,
      hashVault?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        vaultAdminAddress: string;
        silicaAddress: string;
        amount: BigNumber;
        timestamp: BigNumber;
        hashVault: string;
      }
    >;
  };

  estimateGas: {
    allocation(overrides?: CallOverrides): Promise<BigNumber>;

    calculateShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _paymentToken: string,
      _rewardToken: string,
      _dateOfStart: BigNumberish,
      _duration: BigNumberish,
      _coolingDuration: BigNumberish,
      _adminFee: BigNumberish,
      _maxDeposits: BigNumberish,
      _minDeposits: BigNumberish,
      _swapRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateAllSilicas(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateSingleSilica(
      silicaAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseSilica(
      silicaAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _paymentToken: string,
      _rewardToken: string,
      _dateOfStart: BigNumberish,
      _duration: BigNumberish,
      _coolingDuration: BigNumberish,
      _adminFee: BigNumberish,
      _maxDeposits: BigNumberish,
      _minDeposits: BigNumberish,
      _swapRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateAllSilicas(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateSingleSilica(
      silicaAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseSilica(
      silicaAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
