/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOracleInterface extends ethers.utils.Interface {
  functions: {
    "get(uint256)": FunctionFragment;
    "getLastIndexedDay()": FunctionFragment;
    "isDayIndexed(uint256)": FunctionFragment;
    "updateIndex(uint256,uint256,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getLastIndexedDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDayIndexed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIndex",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastIndexedDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDayIndexed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIndex",
    data: BytesLike
  ): Result;

  events: {};
}

export class IOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOracleInterface;

  functions: {
    get(
      _date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        date: BigNumber;
        referenceBlock: BigNumber;
        hashrate: BigNumber;
        reward: BigNumber;
        fees: BigNumber;
        difficulty: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getLastIndexedDay(overrides?: CallOverrides): Promise<[number]>;

    isDayIndexed(
      _referenceDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateIndex(
      _referenceDay: BigNumberish,
      _referenceBlock: BigNumberish,
      _hashrate: BigNumberish,
      _reward: BigNumberish,
      _fees: BigNumberish,
      _difficulty: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  get(
    _date: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      date: BigNumber;
      referenceBlock: BigNumber;
      hashrate: BigNumber;
      reward: BigNumber;
      fees: BigNumber;
      difficulty: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getLastIndexedDay(overrides?: CallOverrides): Promise<number>;

  isDayIndexed(
    _referenceDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateIndex(
    _referenceDay: BigNumberish,
    _referenceBlock: BigNumberish,
    _hashrate: BigNumberish,
    _reward: BigNumberish,
    _fees: BigNumberish,
    _difficulty: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    get(
      _date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        date: BigNumber;
        referenceBlock: BigNumber;
        hashrate: BigNumber;
        reward: BigNumber;
        fees: BigNumber;
        difficulty: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getLastIndexedDay(overrides?: CallOverrides): Promise<number>;

    isDayIndexed(
      _referenceDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateIndex(
      _referenceDay: BigNumberish,
      _referenceBlock: BigNumberish,
      _hashrate: BigNumberish,
      _reward: BigNumberish,
      _fees: BigNumberish,
      _difficulty: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    get(_date: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getLastIndexedDay(overrides?: CallOverrides): Promise<BigNumber>;

    isDayIndexed(
      _referenceDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateIndex(
      _referenceDay: BigNumberish,
      _referenceBlock: BigNumberish,
      _hashrate: BigNumberish,
      _reward: BigNumberish,
      _fees: BigNumberish,
      _difficulty: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get(
      _date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastIndexedDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDayIndexed(
      _referenceDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateIndex(
      _referenceDay: BigNumberish,
      _referenceBlock: BigNumberish,
      _hashrate: BigNumberish,
      _reward: BigNumberish,
      _fees: BigNumberish,
      _difficulty: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
